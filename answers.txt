# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Meet Bhagdev
Student ID: 104079094
Email: meetbhagdev@ucla.edu

# Partner 2 (if you're working in a team)
# Name: Akshaan Kakar
# Student ID: 804029538
# Email: akshaan@ucla.edu

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)
We used the fork() command to implement that parallel upload and dowload. Based on the pid we receive from the forking,
we decide what to do. Previously, it would simply block, but using the event driven approach we make it do the appropriate tast.
The child process will execute the task(download or upload). For eg the client will fork once for every download request,
but if the fork does not succeed, the client won't try to download the new file and will be run again.
We made sure that all downloads finish first by using a blocking model. This ensured that we reclaimed any resources
before we move to uploads and listen for peers. 



# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)
Conditions that triggered a buffer overrun are :
1) In static void task_upload(task_t *t)
There is a call to  (osp2p_snscanf(t->buf, t->tail, "GET %s OSP2P\n", t->filename) < 0).
In a snscanf function, the second arguement is the length of the string to be placed 
in the buffer, this could be problematic and cause the buffer overrun because tail t->tail
could be bigger then the allowed legnth
2)In task_t *start_download(task_t *tracker_task, const char *filename) tgere is a call to
strcpy(t->filename, filename). This could potentially be exploited to cause buffer overun.
The strcpy function merely writes the entire string into memory, overwriting whatever 
came after it. Does not matter what the length of the string is.

How did we fix it?
1) By replacing  (osp2p_snscanf(t->buf, t->tail, "GET %s OSP2P\n", t->filename) < 0),
with (osp2p_snscanf(t->buf, FILENAMESIZ-1, "GET %s OSP2P\n", t->filename) < 0).
Now the length of the string is limited by FILENAMESIZ - 1.
2) By replacing strcpy(t->filename, filename) with 
 strncpy(t->filename, filename, FILENAMESIZ-1); 
 t->filename[FILENAMESIZ-1] = '\0';
 The strncpy function truncates the string to the correct 
 length(thus avoiding the buffer overflow), but without the terminating null character.
 Thus we manually added the null character.


 

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

1 . We made sure the only files in current directories could be accessed. Fixed the bug,
by which someone could request a file with the filepath(including directory). This could be 
explouted maliciosly. We used strchr to do so. Strchr returns a pointer to the first occurrence 
of character in the C string . Thus we try to find / in the t->filename, if we get anything but 0, 
that means it is refers to a directory and we throw an error.

2. We fixed the long filename problem. If the requested filename is bigger then the max FILENAMESIZ,
then we throw an error. 
 
3. We prevented the transfer of infintie length data on receiving a request form a peer. 
If the total_writen field exceeds a certain pre defined number(which can be changed) then 
we throw and error and try again 

4. We fixed the error were the popular peer causes the program to crash. We realized,
that the buffer is not big enough to accomodate a large number of peers. If this happens,
the buffer gets full and we are made to disconnect from the tracker. This could have been fixed 
in several ways.
We could have changed the way the buffer is read such that on receiving too many requests
it is dynamically resized. Or we could have made it read on complete lines.
Since this might interfere with the way the client works and make us fail test cases, we
decided to increase the buffer size and thus accomodate more requests.

//ADD MORE HERE

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

# Extra credit problems
#Extra credit problem: MD5 Checksum support

Added support for checking MD5 checksums for the downloaded file. 
Using the MD5HASH RPC, we get the hash from the tracker in start_download(). 
During task_download(), we calculate the hash for the file after downloading it from the peer and then compare the two hashes.
If they are the same, the download continues. 
Else, the file is corrupted and the download is terminated.

# Add any other information you'd like us to know below this line.
